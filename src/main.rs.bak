struct ConservedQuantity(usize);

impl ConservedQuantity {
    fn new() -> Self {
        Self(0)
    }
}

struct FluxFunction<F> {
    f: F,
}

impl<F: FnOnce(f64) -> f64> FluxFunction<F> {
    fn new(f: F) -> Self {
        Self { f }
    }
}

enum Schema {
    ForwardFD,
    MidPointFD,
}

struct ConservationLaw<F> {
    u: ConservedQuantity,
    flux: FluxFunction<F>,
    time_schema: Schema,
    space_schema: Schema,
}

struct ConservationLawBuilder<F> {
    u: Option<ConservedQuantity>,
    flux: Option<FluxFunction<F>>,
    time_schema: Option<Schema>,
    space_schema: Option<Schema>,
}

impl ConservationLawBuilder<()> {
    fn new() -> Self {
        Self {
            u: None,
            flux: None,
            time_schema: None,
            space_schema: None,
        }
    }
}

impl<F> ConservationLawBuilder<F> {
    fn conserved_quantity(mut self, u: ConservedQuantity) -> Self {
        self.u = Some(u);
        self
    }

    fn flux_function<E>(self, f: FluxFunction<E>) -> ConservationLawBuilder<E> {
        ConservationLawBuilder {
            flux: Some(f),
            u: self.u,
            time_schema: self.time_schema,
            space_schema: self.space_schema,
        }
    }

    fn time_schema(mut self, s: Schema) -> Self {
        self.time_schema = Some(s);
        self
    }

    fn space_schema(mut self, s: Schema) -> Self {
        self.space_schema = Some(s);
        self
    }

    fn done(self) -> Option<ConservationLaw<F>> {
        Some(ConservationLaw {
            u: self.u?,
            flux: self.flux?,
            time_schema: self.time_schema?,
            space_schema: self.space_schema?,
        })
    }
}

impl ConservationLaw<()> {
    fn new() -> ConservationLawBuilder<()> {
        ConservationLawBuilder::new()
    }
}

fn main() {
    let u = ConservedQuantity::new();
    let f = FluxFunction::new(|u| 0.5 * u * u); // f(u) = 1/2 * u^2

    let mut burger = ConservationLaw::new()
        .conserved_quantity(u)
        .flux_function(f)
        .time_schema(Schema::ForwardFD)
        .space_schema(Schema::MidPointFD)
        .done();
}
